{"version":3,"sources":["component/app/Nasa.js","component/app/WeatherChild/WeatherChild.js","component/app/Weatherapp.js","component/app/TicketmasterChild/TicketmasterChild.js","component/app/Ticketmaster.js","App.js","reportWebVitals.js","index.js"],"names":["Nasa","props","useState","url","key","setImg","navigator","console","log","geolocation","getCurrentPosition","position","coords","longitude","latitude","useEffect","fetch","then","res","blob","imgBlob","createObjectURL","catch","err","WeatherChild","Object","keys","main","length","weather","Card","body","inverse","style","backgroundColor","borderColor","CardTitle","city","CardSubtitle","Math","round","temp","textAlign","CardImg","src","icon","alt","height","width","fontSize","marginTop","time","Weatherapp","state","baseURL","apiKey","unit","cfSwitch","bind","this","fetchInterval","setInterval","response","json","setState","prevProps","prevState","localTime","Date","toLocaleTimeString","clearInterval","className","onClick","React","Component","TicketmasterResults","events","changePage","e","map","event","name","type","href","web_url","_id","Ticketmaster","a","postalCode","setPostalCode","latlong","startDateTime","setStartDateTime","endDateTime","setEndDateTime","pageNumber","setPageNumber","results","setResults","fetchResults","eventsData","onSubmit","preventDefault","handleSubmit","onChange","target","value","required","pattern","direction","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e17c435.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nconst Nasa = (props) => {\r\n    const [url, seturl] = useState(\"https://api.nasa.gov/planetary/earth/imagery\");\r\n    const [key, setkey] = useState(\"zaxtk9rKvXyBmxXTh0eSgBGL5QSYKVjbXQs66gJy\")\r\n    const [img, setImg] = useState(\"\");\r\n\r\n\r\n    if('geolocation' in navigator) {\r\n        console.log(\"Location is available\");\r\n        navigator.geolocation.getCurrentPosition(function(position){\r\n        console.log(position.coords.longitude);\r\n        console.log(position.coords.latitude);\r\n        });\r\n        } else {\r\n        console.log(\"Location is not available\")\r\n        }\r\n        \r\n    function success(position) {\r\n        const latitude  = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n            fetch(`${url}?api_key=${key}&lon=${\"-86.06\"}&lat=${\"40.04\"}`)\r\n            .then(res => res.blob())\r\n            .then((imgBlob) => \r\n                setImg(url.createObjectURL(imgBlob))\r\n            )\r\n            .catch(err => console.log(err))\r\n        }, [])\r\n\r\n\r\n    return(\r\n        <div>\r\n                <h1>Latitude: {}</h1>\r\n                <h1>Longitude: {}</h1>\r\n        </div>\r\n    )\r\n    }\r\n\r\nexport default Nasa;\r\n","import {\r\n    Card, CardImg, CardTitle, CardSubtitle\r\n} from 'reactstrap';\r\n\r\n\r\nconst WeatherChild = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div>\r\n            {\r\n                Object.keys(props.main).length === 0 && props.weather.length === 0? (\r\n                    <div> Loading... </div>\r\n                ) : (\r\n                    <div> <Card body inverse style={{backgroundColor: '#333', borderColor: '#333' }}>\r\n                        <CardTitle>\r\n                            <h1>{props.city}</h1>\r\n                        </CardTitle>\r\n                        <CardSubtitle>\r\n                          <h3>{Math.round(props.main.temp)}Â°</h3>\r\n                        </CardSubtitle>\r\n                        <div style={{textAlign: 'center'}}>\r\n                        <CardImg src={`http://openweathermap.org/img/w/${props.weather[0].icon}.png`} alt='weather icon' style={{height: '50px', width: '50px'}}/>\r\n                        </div>\r\n                        <p style={{fontSize: '12px', marginTop: '3em'}}>Last update at {props.time}</p>\r\n                        </Card> \r\n                        </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherChild","import React from 'react';\r\nimport WeatherChild from '../app/WeatherChild/WeatherChild';\r\n\r\nclass Weatherapp extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state= {\r\n            baseURL: 'https://api.openweathermap.org/data/2.5/weather',\r\n            city: 'Indianapolis',\r\n            apiKey: '37f707e1986a973647faed4122426481',\r\n            main: {},\r\n            weather: [],\r\n            time: null,\r\n            unit: 'imperial',\r\n        }\r\n        this.cfSwitch=this.cfSwitch.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchInterval = setInterval (() => {\r\n            fetch(`${this.state.baseURL}?q=${this.state.city}&units=${this.state.unit}&appid=${this.state.apiKey}`)\r\n            .then(response=>response.json())\r\n            .then(json => this.setState({\r\n                main: json.main,\r\n                weather: json.weather,\r\n            }))\r\n            .catch(err => console.log(err))\r\n        },1500)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        console.log(prevState.main.temp, this.state.main.temp);\r\n\r\n        let localTime = new Date().toLocaleTimeString();\r\n        if ( prevState.main.temp !== this.state.main.temp) {\r\n            console.log('state has changed');\r\n            this.setState({\r\n                time:localTime\r\n            })\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        console.log('clearing interval');\r\n        clearInterval(this.fetchInterval);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='main'>\r\n                <div className='mainDiv' style={{textAlign:'center'}}>\r\n                <button onClick ={()=>this.cfSwitch()}>'Merica/Cel</button>\r\n                <WeatherChild city={this.state.city} main={this.state.main} weather={this.state.weather} time={this.state.time} unit={this.state.unit} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    cfSwitch (){\r\n        if (this.state.unit == 'imperial') {\r\n            this.state.unit = 'metric';\r\n        } else {\r\n            this.state.unit = 'imperial';\r\n        }\r\n    }\r\n}\r\n\r\nexport default Weatherapp","import React from 'react';\r\n\r\nconst TicketmasterResults = (props) => {\r\n    const {events, changePage} = props\r\n\r\n    console.log(events);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={(e) => changePage(e, 'down')}>Previous 10</button>\r\n                <button onClick={(e) => changePage(e, 'up')}>Next 10</button>\r\n            </div>\r\n            {events.map(event => {\r\n                return (\r\n                    <div key={event._id}>\r\n                        <h3>{event.name}</h3>\r\n                        <p>\r\n                            {event.type}\r\n                       </p>\r\n                        <a href={event.web_url}><button>Find Out More!</button></a>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TicketmasterResults;","import React, {useState} from 'react';\r\nimport TicketmasterResults from './TicketmasterChild/TicketmasterChild';\r\n\r\nconst baseURL = 'https://app.ticketmaster.com/discovery/v2/events.json';\r\nconst key = 'FGYnq11NCzOT2Nsw8GyhfycPCAnJXEix';\r\n\r\nconst Ticketmaster = () => {\r\n    const [events, setEvents] = useState('');\r\n\r\n    let position = async () => {\r\n        await navigator.geolocation.getCurrentPosition(function(position) {\r\n            console.log('Latitude is: ', position.coords.latitude);\r\n            console.log('Longitude is: ', position.coords.longitude);\r\n        }, )\r\n    }\r\n    \r\n\r\n    // const geoPoint = position();\r\n    // // const radius = 25;\r\n    // const limit = 10;\r\n \r\n    // let getEvents = async () => {\r\n    //     const res = await fetch(`${baseURL}?&${geoPoint}&size=1&apikey=${apiKey}`);\r\n    //     const data = await res.json();\r\n    //     const newData = data.filter.slice(0, 10);\r\n    \r\n    //     setEvents(newData);\r\n    //     console.log(newData);\r\n    // }\r\n//    getEvents();\r\n\r\n    \r\n    //! Trying another other method\r\n\r\n    // const [search, setSearch] = useState('')\r\n    const [postalCode, setPostalCode] = useState('')\r\n    const [latlong={position}, setlatlong] = useState('')\r\n    const [startDateTime, setStartDateTime] = useState('')\r\n    const [endDateTime, setEndDateTime] = useState('')\r\n    const [pageNumber, setPageNumber] = useState(0)\r\n    const [results, setResults] = useState([])\r\n\r\n    const fetchResults = async () => {\r\n        let url = `${baseURL}?apikey=${key}&page=${pageNumber}`;\r\n        url = postalCode ? url + `&postalCode=${postalCode}` : url;\r\n        url = latlong ? url + `&latlong=${latlong}&locale=*` : url;\r\n        url = startDateTime ? url + `&beging_date=${startDateTime}` : url;\r\n        url = endDateTime ? url + `&end_date=${endDateTime}` : url;\r\n        \r\n        const res = await fetch(url);\r\n        const eventsData = await res.json();\r\n\r\n        setResults(eventsData);\r\n        console.log(eventsData)\r\n\r\n    };\r\n    \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetchResults();\r\n        setPageNumber(0);\r\n    };\r\n    \r\n    const changePageNumber = (e, direction) => {\r\n        e.preventDefault()\r\n        if (direction === 'down') {\r\n            if (pageNumber > 0) {\r\n                setPageNumber(pageNumber - 1)\r\n                fetchResults();\r\n            }\r\n        }\r\n        if (direction === 'up') {\r\n            setPageNumber(pageNumber + 1)\r\n            fetchResults();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <h1>Ticketmaster Events</h1> */}\r\n            <div>\r\n                <form onSubmit={(e) => handleSubmit(e)}>\r\n                    {/* <span>Enter a single search term (required) : </span>\r\n                    <input type='text' name='search' onChange={(e) => setSearch(e.target.value)} required />\r\n                    <br />  */}\r\n                    <span>Enter postal code (required) : </span>\r\n                    <input type='number' name='postalCode' onChange={(e) => setPostalCode(e.target.value)} required />\r\n                    <br />\r\n                    <span>Enter a start date: </span>\r\n                    <input type=\"date\" name=\"startDateTime\" pattern=\"[0-9]{8}\" onChange={(e) => setStartDateTime(e.target.value)} />\r\n                    <br />\r\n                    <span>Enter an end date: </span>\r\n                    <input type=\"date\" name=\"endDateTime\" pattern=\"[0-9]{8}\" onChange={(e) => setEndDateTime(e.target.value)} />\r\n                    <br />\r\n                    <button className=\"submit\">Submit search</button>\r\n                </form>\r\n                {/* {events.map(event => {<div> <h4>${event.name}</h4> <p>${event.type}</p> </div>})} */}\r\n                {results.length > 0 ? <TicketmasterResults results={results} changePage={changePageNumber} /> : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Ticketmaster;","import React from 'react';\r\nimport './App.css';\r\nimport Nasa from './component/app/Nasa';\r\nimport Weatherapp from './component/app/Weatherapp';\r\nimport Ticketmaster from './component/app/Ticketmaster';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App\">\r\nÂ  Â  Â    <h1>Team 5: 24hr Project</h1>\r\nÂ  Â  Â    <h2>Reagan, Nolan, Ginea</h2>\r\nÂ  Â  Â    <hr />\r\n      </div>\r\nÂ  Â  Â  <div>\r\nÂ  Â  Â  Â  {/* <h3>Reagan Branch</h3> */}\r\nÂ  Â  Â  Â  <h3>Nasa</h3>\r\nÂ  Â  Â  Â  <Nasa />\r\nÂ  Â  Â  </div>\r\nÂ  Â  Â  <div>\r\nÂ  Â  Â  Â  {/* <h3>Nolan Branch</h3> */}\r\nÂ  Â  Â  Â  <h3>Weather</h3> \r\nÂ  Â  Â  Â  <Weatherapp /> \r\nÂ  Â  Â  </div>\r\nÂ  Â  Â  <div>\r\nÂ  Â  Â  Â  {/* <h3>Ginea Branch</h3> */}\r\nÂ  Â  Â  Â  <h3>Ticketmaster</h3>\r\nÂ  Â  Â  Â  <Ticketmaster />\r\nÂ  Â  Â  </div>\r\n\r\nÂ  Â  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}